name: Scoreboard (on week issue close)

on:
  issues:
    types: [closed]

permissions:
  contents: write
  issues: read

jobs:
  update:
    if: contains(github.event.issue.labels.*.name, 'auto:scoreboard')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v8
        with:
          script: |
            const total = 16;
            const weeks = Array.from({length: total}, (_,i)=>String(i+1).padStart(2,'0'));
            const allIssues = await github.paginate(github.rest.issues.listForRepo, {
              owner: context.repo.owner, repo: context.repo.repo, state: "all", per_page: 100, labels: "auto:scoreboard"
            });
            const byWeek = {};
            for (const w of weeks) {
              const issue = allIssues.find(i => i.labels.some(l => l.name === `week:${w}`));
              if (!issue) byWeek[w] = { status: "—", link: "" };
              else byWeek[w] = { status: issue.state === "closed" ? "✅" : "⏳", link: `[Week ${w}](${issue.html_url})` };
            }
            const rows = weeks.map(w => `| ${w} | ${byWeek[w].status} | ${byWeek[w].link} |`).join("\n");
            const content = `# 16-Week Scoreboard\n\nUpdated: ${new Date().toISOString()}\n\n| Week | Status | Issue |\n|---|---|---|\n${rows}\n`;
            const path = "SCOREBOARD.md";
            let sha;
            try {
              const { data } = await github.rest.repos.getContent({ owner: context.repo.owner, repo: context.repo.repo, path });
              sha = data.sha;
            } catch {}
            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner, repo: context.repo.repo, path,
              message: "chore: update scoreboard (issue closed)",
              content: Buffer.from(content, "utf8").toString("base64"),
              sha
            });

